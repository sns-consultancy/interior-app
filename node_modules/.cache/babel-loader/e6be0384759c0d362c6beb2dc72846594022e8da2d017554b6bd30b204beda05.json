{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL;\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\n/**\n * Helper function to get common request headers\n * @returns {Object} - Headers object with API key if available\n */\nconst getHeaders = () => {\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n  if (API_KEY) {\n    headers['x-api-key'] = API_KEY;\n  }\n  return headers;\n};\n\n/**\n * Login user with username and password\n * @param {string} username - The username\n * @param {string} password - The password\n * @returns {Promise} - Promise with the login response\n */\nexport const loginUser = async (username, password) => {\n  if (!username || !password) {\n    throw new Error('Username and password are required');\n  }\n  try {\n    const response = await fetch(`${API_URL}/api/auth/login`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Login failed');\n    }\n\n    // Store authentication data\n    if (data.access_token) {\n      localStorage.setItem('token', data.access_token);\n      localStorage.setItem('userId', data.username || data.user_id);\n    }\n    return data;\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\n\n/**\n * Register a new user\n * @param {Object} userData - User registration data\n * @returns {Promise} - Promise with the registration response\n */\nexport const registerUser = async userData => {\n  if (!userData.username || !userData.password) {\n    throw new Error('Username and password are required');\n  }\n  try {\n    const response = await fetch(`${API_URL}/api/auth/signup`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify(userData)\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Registration failed');\n    }\n    return data;\n  } catch (error) {\n    console.error('Registration error:', error);\n    throw error;\n  }\n};\n\n/**\n * Logout the current user\n */\nexport const logoutUser = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('userId');\n  // Optionally call a logout API endpoint if your backend requires it\n};\n\n/**\n * Check if user is authenticated\n * @returns {boolean} - True if user has a valid token\n */\nexport const isAuthenticated = () => {\n  const token = localStorage.getItem('token');\n  return !!token;\n};\n\n/**\n * Get the current user's ID\n * @returns {string|null} - User ID if authenticated, null otherwise\n */\nexport const getCurrentUserId = () => {\n  return localStorage.getItem('userId');\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","API_KEY","REACT_APP_API_KEY","getHeaders","headers","loginUser","username","password","Error","response","fetch","method","body","JSON","stringify","data","json","ok","message","access_token","localStorage","setItem","user_id","error","console","registerUser","userData","logoutUser","removeItem","isAuthenticated","token","getItem","getCurrentUserId"],"sources":["/Users/bosurambitra/Desktop/interior-app-feature-interior/src/services/authService.js"],"sourcesContent":["const API_URL = process.env.REACT_APP_API_URL;\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\n/**\n * Helper function to get common request headers\n * @returns {Object} - Headers object with API key if available\n */\nconst getHeaders = () => {\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n  \n  if (API_KEY) {\n    headers['x-api-key'] = API_KEY;\n  }\n  \n  return headers;\n};\n\n/**\n * Login user with username and password\n * @param {string} username - The username\n * @param {string} password - The password\n * @returns {Promise} - Promise with the login response\n */\nexport const loginUser = async (username, password) => {\n  if (!username || !password) {\n    throw new Error('Username and password are required');\n  }\n  \n  try {\n    const response = await fetch(`${API_URL}/api/auth/login`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({ username, password }),\n    });\n    \n    const data = await response.json();\n    \n    if (!response.ok) {\n      throw new Error(data.message || 'Login failed');\n    }\n    \n    // Store authentication data\n    if (data.access_token) {\n      localStorage.setItem('token', data.access_token);\n      localStorage.setItem('userId', data.username || data.user_id);\n    }\n    \n    return data;\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\n\n/**\n * Register a new user\n * @param {Object} userData - User registration data\n * @returns {Promise} - Promise with the registration response\n */\nexport const registerUser = async (userData) => {\n  if (!userData.username || !userData.password) {\n    throw new Error('Username and password are required');\n  }\n  \n  try {\n    const response = await fetch(`${API_URL}/api/auth/signup`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify(userData),\n    });\n    \n    const data = await response.json();\n    \n    if (!response.ok) {\n      throw new Error(data.message || 'Registration failed');\n    }\n    \n    return data;\n  } catch (error) {\n    console.error('Registration error:', error);\n    throw error;\n  }\n};\n\n/**\n * Logout the current user\n */\nexport const logoutUser = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('userId');\n  // Optionally call a logout API endpoint if your backend requires it\n};\n\n/**\n * Check if user is authenticated\n * @returns {boolean} - True if user has a valid token\n */\nexport const isAuthenticated = () => {\n  const token = localStorage.getItem('token');\n  return !!token;\n};\n\n/**\n * Get the current user's ID\n * @returns {string|null} - User ID if authenticated, null otherwise\n */\nexport const getCurrentUserId = () => {\n  return localStorage.getItem('userId');\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}